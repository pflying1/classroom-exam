//business logic
//% 나머지 값을 내는 연산자 "&"
// 7 % 2 = 1
// 숫자 7을 2로 나눈 나머지 값은 1이다.
// 8 % 2 = 0
// 숫자 8을 2로 나눈 나머지 값은 0이다.

// 홀수 odd number, 짝수 even number 를 구분하는 근거로
// 2로 나눈 값의 '몫'을 제외한 나머지가 0이면 짝수 0이 아니면 홀수라는 결론이 나온다.

// work: 오라클 빌딩에는 두개의 엘리베이터가 있다.

function oddElevator(floorNumber) {}

function evenElevator(floorNumber) {}

//홀수 전용 짝수 전용 엘리베이터가 두개가 마련되어 있지만, 예외가 발생한다.
// 짝수 엘리베이터는 1층도 가능하게 설계 되어있다.
// 홀수 엘리베이터는 10층도 가능하게 설계 되어있다.
// 짝수 홀수 엘리베이터 둘다 지하일층 -1 까지 가능하게 설계되어있다.

//ESM 모듈 방식으로 사용가능한
//mpm install inquirer 모듈을 설치하여
// 지하 1층부터 10층까지의 숫자를 입력 할 수 있는 인터페이스를 제작한다.
// "문을 열겠습니다." 라는 문구가 나오게 한다.
//1초뒤에 "n층에 도착하였습니다."라는 문구가 나오게 한다.
//"문을 닫습니다." 라는 문구가 나오게 한다.

/*
 * 위의 설명을 종합하여 orderlist로 (순서가 있는 목록)으로
 * 예상되는 절차를 술어로 작성해보세요.
 *
 *
 * 1. 먼저 for문 let i = 0  부터 시작해서 10까지 1씩 증가하는 함수를 만든다. 0번은 -1 층
 * 2. 층수를 올라가는 for문을 만들었으면 내려가는 for 문도 만들어준다. 10부터 0까지 1씩 감소하는 함수
 * 3. % 나머지 값을 내는 연산자 "&" 을 넣어줘서 A엘리베이터는 홀수층만 갈수 있게 나머지가 1이면 true를 줘서 움직이게하고 아니면 false를 줘서 멈춘다.
 * 4. B엘리베이터인경우 % 나머지 값을 내는 연산자 "&" 을 넣어줘서 나머지가 0이면 true를 줘서 움직이게 하고 아니면 false일경우 멈춘다.
 * 5. A엘리베이터에는 최댓값이 짝수일경우 최댓값-1을 해준다.
 * 6. B엘리베이터에는 최솟값이 홀수일경우 최솟값+1을 해준다.
 * 7. 만약 지하1층은 0층으로 생각한다. A,B값이 === 0 이면 true를 반환한다.
 *
 * 여기서 생각해야 할 관점이 각 엘리베이터가 몇층에서 시작할건지 시작점을 줘야함
 * 올라가거나 내려갈때 1층씩만 움직일수 있게 해야함
 * 시작한 층수에서 가까운층에서 먼저 멈출수 있게 break를 해줘야함
 * 각각 홀수, 짝수 층에서 불이 들어오면 내려가야하는지 올라가야하는지 판단해야함.
 * A,B엘리베이터 둘다 갈수 있는층에 불이 들어올경우 가까운 엘리베이터가 가는지 둘다 신호를 받고 가는경우도 생각해야함
 *
 */
